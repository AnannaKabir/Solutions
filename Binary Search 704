// My Solution
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int Left = 0, Right = nums.size() - 1;
        while (Left <= Right) {
            int mid = Left + (Right - Left) / 2;
            if (nums[mid] == target) return mid;
            else if (nums[mid] < target) Left = mid + 1;
            else Right = mid - 1;
        }
        return -1;
    }

};
//More efficient solution
class Solution {
public:
    int search(vector<int>& nums, int target) {
        int start = 0;
        int end = nums.size() -1;
        int mid = start + (end - start) / 2;
        while (start <= end)
        {
            if (nums[mid] == target )return mid;
            else if (nums[mid] > target )end = mid -1;
            else if (nums[mid] < target) start = mid + 1;
            mid = start + (end - start) / 2;
        }
        return -1;
    }
};
